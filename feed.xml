<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JiveUI</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 30 May 2016 18:06:22 +0700</pubDate>
    <lastBuildDate>Mon, 30 May 2016 18:06:22 +0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Jive on WWX2016</title>
        <description>&lt;p&gt;We had a speech on WWX 2016 by &lt;a href=&quot;https://twitter.com/klmsmb&quot;&gt;Maxim Bekhterev&lt;/a&gt;. 
You can see the video and slides of it below.&lt;/p&gt;

&lt;p&gt;More over we’d like to present &lt;a href=&quot;/principles/roadmap/2016/05/28/roadmap.html&quot;&gt;our ideas about UI frameworks in general 
and about how the Jive should look like in the future&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;video&quot;&gt;Video&lt;/h4&gt;

&lt;iframe width=&quot;300&quot; height=&quot;300&quot; src=&quot;http://www.youtube.com/embed/p8hmrpQFXdY?color=white&amp;amp;theme=light&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;slides&quot;&gt;Slides&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1Xar0gWyG2DYcmYIj7iwJvJ4UG8f45Yij1IQqnhJSI9U/pub?start=true&amp;amp;loop=false&amp;amp;delayms=10000&quot;&gt;Slides on Google Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks,
Jive team&lt;/p&gt;
</description>
        <pubDate>Sun, 29 May 2016 17:00:00 +0700</pubDate>
        <link>/principles/roadmap/2016/05/29/wwx2016.html</link>
        <guid isPermaLink="true">/principles/roadmap/2016/05/29/wwx2016.html</guid>
        
        
        <category>principles</category>
        
        <category>roadmap</category>
        
      </item>
    
      <item>
        <title>The Jive principles and the roadmap</title>
        <description>&lt;p&gt;Firstly, I’m going to express our idea about a good UI library then our roadmap will be presented.&lt;/p&gt;

&lt;p&gt;It should be mentioned that now we’ve got two versions of Jive framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jiveui/jive/tree/master&quot;&gt;The current version of Jive&lt;/a&gt;. It used to create several mobile
 and web apps that are in production now. It’s based on AsWing UI library.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jiveui/jive/tree/next&quot;&gt;The next version&lt;/a&gt;. Recently we’ve decided to rewrite Jive from scratch
 (almost from scratch ;) ). The decision was made because the previous version does not meet our principles of a
 good UI framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this post is about the next version. Moreover, the whole site is about it.&lt;/p&gt;

&lt;h4 id=&quot;principles&quot;&gt;Principles&lt;/h4&gt;

&lt;p&gt;Our base principles are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A framework should be easy to use: The UI framework should be easy to create apps and to extend its components.&lt;/li&gt;
  &lt;li&gt;The UI responsiveness’s invaluable : The user experience should be smooth.
It&#39;s extremely important to complete UI tasks within a time less than the frustration threshold.&lt;/li&gt;
  &lt;li&gt;A framework must love and knows its platform even if it’s a crossplatform framework: We focuses on mobile platforms.
So many specific mobile features (like touches, different PPI and screen dimensions) were considered
and put into the heart of Jive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h4&gt;
&lt;p&gt;Basing on the ideas above we’ve planned the main features of the Jive framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The easiness to start and create applications:
    &lt;ul&gt;
      &lt;li&gt;few base components;&lt;/li&gt;
      &lt;li&gt;simple build process; &lt;strong&gt;Command line tools&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;declarative way to define views of UI components; &lt;strong&gt;MVVM, Data binding, XML&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;a visual design tool;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The easiness to extend the framework:
    &lt;ul&gt;
      &lt;li&gt;easy to create custom UI component; &lt;strong&gt;Keep the code base as simple as possible&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;the theme system where the view of every UI component may be changed as much as possible keeping its behavior;
&lt;strong&gt;XML&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;English is not enough. It’s important to provide a extendable I18n system where a
user can change strings that we added to UI components. &lt;strong&gt;rox-i18n, unifill, native text fields&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The User Experience
    &lt;ul&gt;
      &lt;li&gt;We need to have the performance to provide responsiveness. &lt;strong&gt;Some bitmap caching&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Visual reactions, animations to express actions. It needs to make 
the animation definition as simple as possible. &lt;strong&gt;Define animations inside view in XML&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mobile stuff
    &lt;ul&gt;
      &lt;li&gt;DPI support; &lt;strong&gt;Virtual pixels, percents&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Declarative graphics
    &lt;ul&gt;
      &lt;li&gt;use SVG format to define graphics in the view XMLs;&lt;/li&gt;
      &lt;li&gt;bind the view models to SVG content.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Getting rid of the AsWing stuff like LookAndFeel, Border, layouts, foreground, background, preferredSize.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;whats-done&quot;&gt;What’s done&lt;/h4&gt;
&lt;p&gt;The next version is in progress of development. But you can take a look at 
&lt;a href=&quot;/tutorial/svg/animation/2016/05/21/heart.html&quot;&gt;the first example of its usage&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Here are our ideas and plans. If you have any advises, suggestions or 
different ideas about an UI framework, fill free to express them in comments. 
We’ll appreciate it a lot.&lt;/p&gt;

&lt;p&gt;Thanks,
Jive team&lt;/p&gt;
</description>
        <pubDate>Sat, 28 May 2016 17:00:00 +0700</pubDate>
        <link>/principles/roadmap/2016/05/28/roadmap.html</link>
        <guid isPermaLink="true">/principles/roadmap/2016/05/28/roadmap.html</guid>
        
        
        <category>principles</category>
        
        <category>roadmap</category>
        
      </item>
    
      <item>
        <title>Get started with Jive</title>
        <description>&lt;p&gt;First of all there are 2 versions of Jive.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jiveui/jive/tree/master&quot;&gt;Legacy&lt;/a&gt;. There are several apps in production . We support it but not planning new development there.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jiveui/jive&quot;&gt;Next&lt;/a&gt;. It’s a main version. Now it’s under construction. We’re going to have huge progress here in 2016.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whole information here is about the next version.&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://haxe.org/download/&quot;&gt;Haxe Toolkit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.openfl.org/documentation/getting-started/installing-openfl/&quot;&gt;OpenFL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;actuate&lt;/li&gt;
  &lt;li&gt;unifill&lt;/li&gt;
  &lt;li&gt;svg&lt;/li&gt;
  &lt;li&gt;bindx2&lt;/li&gt;
  &lt;li&gt;hml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So after installing the Haxe Toolkit and the OpenFl it needs to run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;haxelib install actuate
haxelib install unifill
haxelib install svg
haxelib install bindx2
haxelib install hml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next version is not in the lib.haxe.org. So it needs to clone it from github repository:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;haxelib git jive https://github.com/jiveui/jive&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;The Jive has a command tool. It can be run by&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;haxelib run jive&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The arguments are the same as the OpenFL command line tool has. So to test the Jive app you can just run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;haxelib run jive &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ios|android|cpp]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-first-app&quot;&gt;The first app&lt;/h2&gt;

&lt;p&gt;The next step is to create an app using Jive. &lt;a href=&quot;/tutorial/svg/animation/2016/05/21/heart.html&quot;&gt;Let’s create a Heart of Jive application&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 22 May 2016 07:00:00 +0700</pubDate>
        <link>/install/download/2016/05/22/get-started.html</link>
        <guid isPermaLink="true">/install/download/2016/05/22/get-started.html</guid>
        
        
        <category>install</category>
        
        <category>download</category>
        
      </item>
    
      <item>
        <title>How to make the first app</title>
        <description>&lt;p&gt;&lt;strong&gt;Prerequisite:&lt;/strong&gt; Take a look at &lt;a href=&quot;/install/download/2016/05/22/get-started.html&quot;&gt;Get Started post&lt;/a&gt;. It about how to install Jive.&lt;/p&gt;

&lt;p&gt;Throughout this tutorial, we’ll walk you through the creation of a basic Jive application with a bit of animation.&lt;/p&gt;

&lt;p&gt;Here is the video demonstration how our app will work.&lt;/p&gt;

&lt;iframe width=&quot;300&quot; height=&quot;300&quot; src=&quot;http://www.youtube.com/embed/VvJks6XVjNc?color=white&amp;amp;theme=light&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Download the source code from &lt;a href=&quot;https://github.com/jiveui/jive-examples&quot;&gt;jive-examples github repository&lt;/a&gt;. And go to the heart directory.&lt;/p&gt;

&lt;p&gt;The app can be run using the command line below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;haxelib run jive &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ios|android|cpp]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;project-structure&quot;&gt;Project structure&lt;/h4&gt;

&lt;p&gt;The heart project has got 4 files inside. See it below. Let’s explain what they are.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;MainWindow.xml&lt;/strong&gt; &lt;em&gt;(the view)&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;viewmodel
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;MainViewModel.hx&lt;/strong&gt; &lt;em&gt;(the view model)&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Application.hx&lt;/strong&gt; &lt;em&gt;(the start point)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;project.xml&lt;/strong&gt; &lt;em&gt;(the project file)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A Jive project is an &lt;a href=&quot;http://openfl.org&quot;&gt;OpenFL&lt;/a&gt; and &lt;a href=&quot;http://haxe.org&quot;&gt;Haxe&lt;/a&gt; project. So it must have a main class and project.xml as a project file.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.openfl.org/documentation/getting-started/your-first-project/&quot;&gt;OpenFl project description&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.openfl.org/documentation/projects/project-files/xml-format/&quot;&gt;project.xml documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To enable Jive library for the project we need a line below in &lt;em&gt;project.xml&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;haxelib&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jive&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;start-point&quot;&gt;Start point&lt;/h4&gt;

&lt;p&gt;First of all our application needs a start point. It’s the Application class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;view.MainWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;viewmodel.MainViewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jive.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Jive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;w:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dataContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainViewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opened&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The Application constructor only&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;initializes Jive;&lt;/li&gt;
  &lt;li&gt;creates and opens the main Jive window;&lt;/li&gt;
  &lt;li&gt;creates the main view model.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we need to pause and have a bit of information about Model-View-ViewModel concept and how it works for Jive.&lt;/p&gt;

&lt;h4 id=&quot;mvvm-idea&quot;&gt;MVVM idea&lt;/h4&gt;

&lt;p&gt;Jive is based on:&lt;/p&gt;

&lt;p&gt;the &lt;a href=&quot;https://en.wikipedia.org/wiki/Model–view–viewmodel&quot;&gt;Model - View - ViewModel idea&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MVVM facilitates a separation of development of the graphical user interface (a markup language or GUI code)
from development of the business logic (the data model).
The view model of MVVM is a value converter; meaning the view model is responsible for exposing (converting)
the data objects from the model in such a way objects are easily managed and presented.&lt;/p&gt;

  &lt;p&gt;In this respect, the view model is more model than view, and handles most if not all of the view’s display logic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and &lt;a href=&quot;https://en.wikipedia.org/wiki/UI_data_binding&quot;&gt;the Data Binding&lt;/a&gt;. It’s a way to implement a link between views and view models.&lt;/p&gt;

&lt;p&gt;So for our app we need and it’s enough:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a main view; It contains all graphics and layout it.&lt;/li&gt;
  &lt;li&gt;a main view model. It handle the whole behavior (animation).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;view&quot;&gt;View&lt;/h4&gt;

&lt;p&gt;All views in Jive are &lt;a href=&quot;/api/jive/Component.html&quot;&gt;Components&lt;/a&gt;. The important parts of Component’s interface are below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MetricInsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;parent:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a main view we use &lt;a href=&quot;/api/jive/Window.html&quot;&gt;Window&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The window component is a root UI container for Jive application. We extend it using a declarative way. The &lt;strong&gt;MainView.xml&lt;/strong&gt; is below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Window&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jive&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xmlns:geom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jive.geom&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xmlns:haxe=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://haxe.org/&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding windowWidth}&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding windowHeight}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;haxe:Implements&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;![CDATA[
        jive.DataContextControllable&amp;lt;viewmodel.MainViewModel&amp;gt;&lt;/span&gt;
        ]]&amp;gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/haxe:Implements&amp;gt;&lt;/span&gt;

    ...

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Window&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Several points about semantics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the file name means the class name the file declares;&lt;/li&gt;
  &lt;li&gt;the first tag name is the class name it extends;&lt;/li&gt;
  &lt;li&gt;namespaces’re used to define Haxe packages;&lt;/li&gt;
  &lt;li&gt;the information about “http://haxe.org/” namespace can be found on &lt;a href=&quot;https://github.com/profelis/hml&quot;&gt;the HML library page&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;the interface jive.DataContextControllable&lt;viewmodel.MainViewModel&gt; means that the MainWindow can only take MainViewModel objects as a ViewModel (dataContext property).&lt;/viewmodel.MainViewModel&gt;&lt;/li&gt;
  &lt;li&gt;width={Binding windowWidth} means that the width property of the Window is binded to the windowWidth property of the MainViewModel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last point needs more detailed explanation.&lt;/p&gt;

&lt;h4 id=&quot;view-model-and-bindings&quot;&gt;View Model and Bindings&lt;/h4&gt;

&lt;p&gt;In our app we have the MainViewModel. You can see a part of it below.
This viewmodel has a field windowWidth and the MainView binds it to the width property of the Window object.
It means that when the value of MainViewModel.windowWidth is changed the Window.width will be
changed to the new value as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewmodel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jive.geom.Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainViewModel&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ViewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;windowWidth:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;windowHeight:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are three modes of a binding:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;once&lt;/strong&gt; &lt;em&gt;{Binding property mode=once}&lt;/em&gt; The value of viewmodel property goes to the view only once when View.dataContext property is set.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;oneway&lt;/strong&gt; &lt;em&gt;{Binding property mode=oneway}&lt;/em&gt; The value of viewmodel property goes to the view everytime it’s changed. But if the value of a view property is changed it doesn’t go to a view model.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;twoway&lt;/strong&gt; &lt;em&gt;{Binding property mode=twoway}&lt;/em&gt; It’s the case when all changes go from a viewmodel to a view and from a view to a viewmodel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;view-svg&quot;&gt;View: Svg&lt;/h4&gt;

&lt;p&gt;The graphics container in Jive is the Svg component:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Svg&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;content:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The content property is the pure SVG content.&lt;/p&gt;

&lt;p&gt;The example from our app View with Svg component inside.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Svg&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Metric.percent(50)&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Metric.percent(20)&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Metric.absolute(600)&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Metric.absolute(600)&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;rotationAngle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding rotation}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;rotationPivot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;new IntPoint(0, 450)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;content&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;rect&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{rectX}&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{rectY}&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{rectSize}&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{rectSize}&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;stroke=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{strokeColor}&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;stroke-width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;opacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{rectAlpha}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                    ...
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Svg&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see the SVG content also supports bindings to a view model.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; any change of a property binded to the SVG content causes the repaint of whole SVG component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Moreover the SVG content has several special expression to define sizes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;absolute(value)&lt;/strong&gt; means &lt;em&gt;Metric.absolute(value)&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;virtual(value)&lt;/strong&gt; means &lt;em&gt;Metric.virtual(value)&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;widthPercent(value)&lt;/strong&gt; means &lt;em&gt;Metric.percent(value)&lt;/em&gt; and the base it the width of the current SVG component;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;heightPercent(value)&lt;/strong&gt; means &lt;em&gt;Metric.percent(value)&lt;/em&gt; and the base it the height of the current SVG component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Svg&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;content&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rect&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ absolute(50) }&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ virtual(50) }&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ widthPercent(100) }&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ heightPercent(100) }&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ff0000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Svg&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;coordinates-and-sizes-absolute-virtual-percent&quot;&gt;Coordinates and sizes: absolute, virtual, percent&lt;/h4&gt;

&lt;p&gt;All coordinates and sizes of them have type &lt;strong&gt;Metric&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;absolute&lt;/strong&gt; means that value is a number of pixels.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;virtual&lt;/strong&gt; means that value is a number of virtual pixels depending on the PPI of a display.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;percent&lt;/strong&gt; means that the real value of the size will be calculated basing on the parent size.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;action&quot;&gt;Action&lt;/h4&gt;

&lt;p&gt;Let’s add some action to our app.&lt;/p&gt;

&lt;p&gt;We’ve got a rect, two circles and a heart in our
&lt;a href=&quot;https://github.com/jiveui/jive-examples/blob/master/heart/src/view/MainWindow.xml&quot;&gt;MainView&lt;/a&gt;.
The &lt;a href=&quot;http://lib.haxe.org/p/actuate/&quot;&gt;Actuate library&lt;/a&gt; is good to animate our graphics via changing the values of
our view model properties.&lt;/p&gt;

&lt;p&gt;Firstly, place the figures to start positions in the MainViewModel constructor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stageW:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stageWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;windowWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stageW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;windowHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stageHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rectSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rectX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rectY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;strokeColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LIGHT_GRAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSvg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;circle1X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle2X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rectX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;circle1Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle2Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rectY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rectAlpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;circleAlpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;heartAlpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;heartBorderAlpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we show the rect via changing its opacity.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Actuate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;rectAlpha:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;easeNone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;showCircles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So we’re just changing the rectAlpha property of the view model that is binded to the opacity attribute of SVG content.
It causes redrawing of the SVG content and a user can see the visual animation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It’s not the best way to animate because of redrawing of whole SVG content but it’s only a demonstration of the Jive features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I suggest downloading the jive-examples project (if it haven’t been happened yet) and running the Jive heart.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;jive-examples/heart
haxelib run jive &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ios|android|cpp]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Sat, 21 May 2016 20:00:00 +0700</pubDate>
        <link>/tutorial/svg/animation/2016/05/21/heart.html</link>
        <guid isPermaLink="true">/tutorial/svg/animation/2016/05/21/heart.html</guid>
        
        
        <category>tutorial</category>
        
        <category>SVG</category>
        
        <category>animation</category>
        
      </item>
    
      <item>
        <title>Use case: Maintenance</title>
        <description>&lt;p&gt;It’s our first app based on Jive in production.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/ekspluatacia/id1022743438?mt=8&quot;&gt;App Store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=transstroy.maintenance&quot;&gt;Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;300&quot; height=&quot;300&quot; src=&quot;http://www.youtube.com/embed/mhD7MtrlZeE?color=white&amp;amp;theme=light&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This project facilitates communication between the people and the company that maintains their apartaments.&lt;/p&gt;

&lt;p&gt;The first page provides us with the most important information like account info, billing to be paid, and r
esource consumption like water or electricity. Also on this form we put some important navigation buttons,
a button to pay your balance and a history button. This is a lot of information so we integrated a few
interactive elements to hide and show this information when it’s necessary.&lt;/p&gt;

&lt;p&gt;The next page is specifically for all user consumption where we can choose the resource type and review it
with a table or a chart. This table can contain a lot of information and still work pretty fast.
This information is presented with a visual chart  so we can see how our consumptions are changing with each period.
And we can see some point values if we touch it on the chart. Also, we can pick time intervals and time periods for
the table and the chart.
We have another tab with a ticket system when the user can send messages to the maintenance company regarding
issues or problems they may have.&lt;/p&gt;

&lt;p&gt;And a left menu component that contains some additional information. You can see here some interactive elements too,
in order to reduce the amount of visible information at the same time. Lastly, I’ll demonstrate how our text
fields works for iOS in account info form. Today all editable text areas are native so they support all features.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 22:00:00 +0700</pubDate>
        <link>/usecase/ios/android/2016/05/01/maintenance.html</link>
        <guid isPermaLink="true">/usecase/ios/android/2016/05/01/maintenance.html</guid>
        
        
        <category>usecase</category>
        
        <category>ios</category>
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Use case: Clover</title>
        <description>&lt;iframe width=&quot;300&quot; height=&quot;300&quot; src=&quot;http://www.youtube.com/embed/KYO7bUc3A8o?color=white&amp;amp;theme=light&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/klever/id1099716626?mt=8&quot;&gt;App Store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=discount.customers&quot;&gt;Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Clover provides a discount system.
Customers get discounts based on their purchase history.
They go to a shop with a smartphone and identify themselves by a QR code generated by the app.&lt;/p&gt;

</description>
        <pubDate>Sun, 01 May 2016 21:00:00 +0700</pubDate>
        <link>/usecase/ios/android/2016/05/01/clover.html</link>
        <guid isPermaLink="true">/usecase/ios/android/2016/05/01/clover.html</guid>
        
        
        <category>usecase</category>
        
        <category>ios</category>
        
        <category>android</category>
        
      </item>
    
  </channel>
</rss>
